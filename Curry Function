// function curry(f) { // curry(f) does the currying transform
//   return function(a) {
//     return function(b) {
//       return f(a, b);
//     };
//   };
// }

// // usage
// function sum(a, b) {
//   return a + b;
// }

// let curriedSum = curry(sum);

// console.log(curriedSum(1)(2) )
// console.log(curriedSum(1, 2) )

function curry(func) {
  return function curried(...args) {
    console.log('--func--', func.length, '=====', args);
    if (args.length >= func.length) {
      return func.apply(this, args);
    } else {
      return function (...args2) {
        return curried.apply(this, args.concat(args2));
      };
    }
  };
}

function sum(a, b, c) {
  return a + b + c;
}

let curriedSum = curry(sum);

//console.log( curriedSum(1, 2, 3) ); // 6, still callable normally
// console.log( curriedSum(1)(2,3) ); // 6, currying of 1st arg
// console.log( curriedSum(1)(2)(3) ); // 6, full currying

let cur1 = curriedSum(1);
let curl2 = cur1(2);
let curl3 = curl2(3);
console.log(curl2);
